{"version":3,"sources":["views/Main.jsx","components/PetForm.jsx","views/New.jsx","views/Show.jsx","views/Edit.jsx","App.js","serviceWorker.js","index.js"],"names":["Main","props","useState","pets","setPets","useEffect","Axios","get","then","res","data","results","catch","err","console","log","className","map","p","i","key","name","type","to","_id","PetForm","inputs","errors","handleInputChange","handleSubmit","submitValue","onSubmit","htmlFor","value","onChange","message","description","skillOne","skillTwo","skillThree","New","initialPet","skilltwo","pet","setPet","setErrors","e","target","preventDefault","post","navigate","Show","id","onClick","delete","Edit","edit","setEdit","put","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.8d302d57.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Axios from 'axios';\r\nimport { Link } from '@reach/router'\r\n\r\n\r\nconst Main = props => {\r\n\r\n    const [pets, setPets] = useState([]);\r\n\r\n    useEffect(() => {\r\n        Axios.get(\"http://localhost:8000/api/pets\")\r\n            .then(res => {\r\n                // console.log(res.data)\r\n                setPets(res.data.results)\r\n            })\r\n            .catch(err => console.log(err));\r\n    }, [])\r\n\r\n    return (\r\n        <table className=\"table table-danger mx-auto\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>Type</th>\r\n                    <th>Actions</th>\r\n                </tr>\r\n            </thead>\r\n\r\n            <tbody>\r\n                \r\n                {\r\n                    pets.map((p, i) => {\r\n                        return <tr key={i}>\r\n                            <td>{p.name}</td>\r\n                            <td>{p.type}</td>\r\n                            <td>\r\n                                <Link to={`/edit/${p._id}`} className=\"btn btn-info\">Edit</Link>\r\n                                <Link to={`/pet/${p._id}`} className=\"btn btn-warning\">Details</Link>\r\n                            </td>\r\n\r\n                        </tr>\r\n                    })\r\n                }\r\n                \r\n            </tbody>\r\n            <p>test</p>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\n\r\nconst PetForm = props => {\r\n    const { inputs, errors, handleInputChange, handleSubmit, submitValue } = props;\r\n\r\n    return (\r\n        <form className=\"col-12 mx-auto bg-light p-4 rounded\" onSubmit={handleSubmit}>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"name\">Name</label>\r\n                <input type=\"text\" name=\"name\" value={inputs.name} onChange={handleInputChange} className=\"form-control\" />\r\n                <span className=\"text-danger\">{errors.name && errors.name.message}</span>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"type\">Type</label>\r\n                <input type=\"text\" name=\"type\" value={inputs.type} onChange={handleInputChange} className=\"form-control\"/>\r\n                <span className=\"text-danger\">{errors.type && errors.type.message}</span>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"description\">Description</label>\r\n                <input type=\"text\" name=\"description\" value={inputs.description} onChange={handleInputChange} className=\"form-control\"/>\r\n                <span className=\"text-danger\">{errors.description && errors.description.message}</span>\r\n            </div>\r\n            <p>(Optional):</p>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"skillOne\">skill One</label>\r\n                <input type=\"text\" name=\"skillOne\" value={inputs.skillOne} onChange={handleInputChange} className=\"form-control\" />\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"skillTwo\">skill Two</label>\r\n                <input type=\"text\" name=\"skillTwo\" value={inputs.skillTwo} onChange={handleInputChange} className=\"form-control\" />\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"skillThree\">skill Three</label>\r\n                <input type=\"text\" name=\"skillThree\" value={inputs.skillThree} onChange={handleInputChange} className=\"form-control\" />\r\n            </div>\r\n            \r\n            <input type=\"submit\" value={submitValue} className=\"btn btn-secondary\" />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default PetForm;","import React, {useState} from 'react';\r\nimport Axios from 'axios';\r\nimport { navigate } from '@reach/router';\r\nimport PetForm from '../components/PetForm';\r\n\r\n\r\nconst New = props => {\r\n    const initialPet = {\r\n        name:\"\",\r\n        type:\"\",\r\n        description:\"\",\r\n        skillOne:\"\",\r\n        skilltwo:\"\",\r\n        skillThree:\"\",\r\n    }\r\n\r\n    const [pet,setPet] = useState(initialPet);\r\n\r\n    const [errors,setErrors] = useState(initialPet);\r\n\r\n    const handleInputChange = (e) => {\r\n        setPet({\r\n            ...pet,\r\n            [e.target.name]:e.target.value\r\n        })\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        setErrors(initialPet);\r\n        e.preventDefault();\r\n        Axios.post(\"http://localhost:8000/api/create/pet\", pet)\r\n            .then(res => {\r\n                console.log(res.data)\r\n                if(res.data.results){\r\n                    navigate('/');\r\n                }\r\n                else{\r\n                    setErrors(res.data);\r\n                }\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <h2>Add a Pet to the Shelter:</h2>\r\n            <PetForm \r\n                inputs={pet}\r\n                errors={errors}\r\n                handleInputChange={handleInputChange}\r\n                handleSubmit={handleSubmit}\r\n                submitValue=\"Create a Pet\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default New;","import React, {useState,useEffect} from 'react';\r\nimport Axios from 'axios';\r\nimport {navigate} from '@reach/router';\r\n\r\n\r\nconst Show = props => {\r\n    const [pet,setPet] = useState({\r\n        name:\"\",\r\n        type:\"\",\r\n        description:\"\",\r\n        skillOne:\"\",\r\n        skillTwo:\"\",\r\n        skillThree:\"\"\r\n    });\r\n    useEffect(() => {\r\n        Axios.get(`http://localhost:8000/api/pet/${props.id}`)\r\n            .then(res => setPet(res.data.results))\r\n            .catch(err => console.log(err))\r\n    },[props])\r\n\r\n    const destroyPet = () => {\r\n        Axios.delete(`http://localhost:8000/api/destroy/pet/${props.id}`)\r\n            .then(res => navigate('/'))\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    return (\r\n        <div className=\"mx-auto p-5 col-12 bg-dark text-warning\">\r\n            <h2>{pet.name}</h2>\r\n            <p>Type: {pet.type}</p>\r\n            <p>Description: {pet.description}</p>\r\n            <h3>Skills: </h3>\r\n            <ul className=\"list-group text-danger\">\r\n                <li className=\"list-group-item\">{pet.skillOne}</li>\r\n                <li className=\"list-group-item\">{pet.skillTwo}</li>\r\n                <li className=\"list-group-item\">{pet.skillThree}</li>\r\n            </ul>\r\n            <button className=\"btn btn-danger btn-outline-warning m-3\" onClick={destroyPet}>Adopt {pet.name} !</button>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Show;","import React, {useState,useEffect} from 'react';\r\nimport Axios from 'axios';\r\nimport {navigate} from '@reach/router';\r\nimport PetForm from '../components/PetForm';\r\n\r\n\r\nconst Edit = props => {\r\n    const initialPet = {\r\n        name:\"\",\r\n        type:\"\",\r\n        description:\"\",\r\n        skillOne:\"\",\r\n        skillTwo:\"\",\r\n        skillThree:\"\"\r\n    }\r\n\r\n    const [edit,setEdit] = useState(initialPet);\r\n\r\n    const [errors,setErrors] = useState([]);\r\n\r\n    useEffect(() => {\r\n        Axios.get(`http://localhost:8000/api/pet/${props.id}`)\r\n            .then(res => setEdit(res.data.results))\r\n            .catch(err => console.log(err))\r\n    },[props])\r\n    \r\n    const handleInputChange = (e) => {\r\n        setEdit({\r\n            ...edit,\r\n            [e.target.name]:e.target.value\r\n        })\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        setErrors(initialPet);\r\n        e.preventDefault();\r\n        Axios.put(`http://localhost:8000/api/update/pet/${props.id}`, edit)\r\n            .then(res => {\r\n                console.log(res.data)\r\n                if(res.data.results){\r\n                    navigate(`/pet/${edit._id}`);\r\n                }\r\n                else{\r\n                    setErrors(res.data);\r\n                }\r\n            })\r\n            .catch(err => {console.log(err)});\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h2>Edit a Pet:</h2>\r\n            <PetForm \r\n                inputs={edit}\r\n                errors={errors}\r\n                handleInputChange={handleInputChange}\r\n                handleSubmit={handleSubmit}\r\n                submitValue=\"Edit Pet\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\nexport default Edit;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Router, Link} from \"@reach/router\";\nimport Main from './views/Main';\nimport New from './views/New';\nimport Show from './views/Show';\nimport Edit from './views/Edit'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"bg-dark text-warning rounded col-12 mx-auto\">\n        <h1>Pet Shelter</h1>\n        <h4>These Pets are looking for a good home</h4>\n        <div>\n          <Link to=\"/new\" className=\"btn btn-primary mr-2\">Add a Pet To the Shelter</Link>\n          <Link to=\"/\" className=\"btn btn-primary\">Home</Link>\n        </div>\n        <Router>\n          <Main path=\"/\" />\n          <New path=\"/new\" />\n          <Show path=\"/pet/:id\" />\n          <Edit path=\"/edit/:id\" />\n        </Router>\n      </div>\n    </div>  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}